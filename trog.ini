# @c: ma9|"byE`aoComment "bpa ""i

RAM $2000   PPUCTRL
RAM $2001   PPUMASK
RAM $2002   PPUSTATUS
RAM $2003   OAMADDR
RAM $2004   OAMDATA
RAM $2005   PPUSCROLL
RAM $2006   PPUADDR
RAM $2007   PPUDATA
RAM $4000   SQ1_VOL
RAM $4001   SQ1_SWEEP
RAM $4002   SQ1_LO
RAM $4003   SQ1_HI
RAM $4004   SQ2_VOL
RAM $4005   SQ2_SWEEP
RAM $4006   SQ2_LO
RAM $4007   SQ2_HI
RAM $4008   TRI_LINEAR
RAM $400A   TRI_LO
RAM $400B   TRI_HI
RAM $400C   NOISE_VOL
RAM $400E   NOISE_LO
RAM $400F   NOISE_HI
RAM $4010   DMC_FREQ
RAM $4011   DMC_RAW
RAM $4012   DMC_START
RAM $4013   DMC_LEN
RAM $4014   OAMDMA
RAM $4015   SND_CHN
RAM $4016   JOY1
RAM $4017   JOY2

# Vars
RAM $00     savedCurPPUCTRL
#RAM $13-19 _func_1F049 saves these away and restores them before calling a function that modifies at least $19 and $16
RAM $26     maybePrvRomBank
RAM $27     currentRomBank
#RAM $7E     see _loc_98C6
#RAM $7F     see _loc_98C6
RAM $03EC   unknown8ByteVec0
RAM $03F4   unknown8ByteVec1
RAM $0612   relatedTo03EC
RAM $0613   relatedTo03F4
RAM $0685   35ByteVec_0685
RAM $06A8   sumOf35ByteVecH
RAM $06A9   sumOf35ByteVecL
RAM $07DB   Vec5Mask_7DB
RAM $07E1   Vec5Values_7E1

#----

# _loc_98C6
Comment $98C6 "Add bytes at $7E and $7F, store the low nybble back to $7F"
Comment $98D1 "Divide by 16, moving the high nibble to low"
Comment $98D7 "Call _func_9913 ($19) times"
Comment $98D9 "@3"
Comment $9915 "Here"

# _func_9913
Comment $9913 "for x=0 to 5"
Comment $9918 "if (mask[x]) { if (values[x] != 0) values[x]--; if (valuex[x]==0) then goto ++; }"

CertainlyCode $1C06F Reset
Comment $1C071 "Here a #$FF is written to $8007, but that location in ROM contains"
Comment $1C071 "#$FC. Isn't that a bus conflict? Maybe it's meant to obfuscate which"
Comment $1C071 "bank would really be selected (B7 if #$FF, B4 if #$FC?)"

Comment $1C078 "Clear PPU flags"
Comment $1C07E "Wait 5 frames (v blanks)"
Comment $1C088 "We're now in (5th) v blank"
Comment $1C08D "X scroll followed by Y"
Comment $1C093 "Clear PPU flags"
Comment $1C099 "Silence sound"
Comment $1C0A6 "Reset stack pointer"
Comment $1C0A9 "Disable IRQ from APU"
Comment $1C0B3 "memory mapper initialization? series of writes to register"
Comment $1C0B3 "final value written is 01, selecting Bank 01 (the second)?"
Comment $1C0B3 "...seems like it might actually be resetting IRQ handler vectors to $806F... but aren't those locations in ROM? How are they set?!"
Comment $1C0BB "$PPUCTRL <- | $10, set bkgnd tile page 1"
Comment $1C0C4 "Initialize PPU palettes with $0F (black)"
Comment $1C0DA "Enable NMI interrupt:"
Comment $1C0DD "?"
Comment $1C0E5 "if the function succeeded ($1F found), branch will (to re-initialize $0685)"
Comment $1C0E7 "Get the sum of $0685[0-34]."
Comment $1C0EA "Is that sum different from what's stored in $06A8, $06A9?"
Comment $1C0EA "Then jump to +. Else, jump to ++."
Comment $1C0F4 "+: Reinitialize the vector at $0685 and store the sum of those values."
Comment $1C0F4 "Reset $05FE to $FF"

Comment $1C0FF "Variable initialization"
Comment $1C0FF "Initialize a bunch of variables to 0."
Comment $1C117 "Init to 1"
Comment $1C11F "Init to 2"
Comment $1C127 "Initialize a pair of 8-byte vectors starting at $03EC"
Comment $1C131 "Here"

CertainlyCode $1E7C0 EnableNmiInPpu
Comment $1E7C0 "Why does it read PPUSTATUS nd then immediately discard?"

CertainlyCode $1E816 LoadRomBank5
CertainlyCode $1E818 LoadRomBankA
MapperChangeRoutine $1E818 reg A
MapperChangeRoutine $1E816 const 5

# ---
Comment $1E86A "@1"
Comment $1E870 "if $06AD != 0 then:"

CertainlyCode $1E87A WaitForNmi
Comment $1E87A "Wait for interrupt handler (NMI?) to set accum to something other than 6."

CertainlyCode $1F008 NMI
Comment $1F008 "Push A, X, Y"
Comment $1F00D "if (*(0x01) & 0x18 == 0 /* flag ck? */) then call _func_1F049, restore A,X,Y and return"
Comment $1F013 "@2"

#----
Comment $1F049 "if (*(0x06AD) == 0) return"
Comment $1F04E "Save memory locs $13-19, and restore them after fn call."
Comment $1F04E "The called function will overwrite some of those locations, hence the restore."

CertainlyCode $1F627 InitializeOne8BitVecOrTheOther
Comment $1F627 "If accum is 0 (or $180?) store 8 zeroes at $03F4[0-7], and set $0613 to "
Comment $1F627 "zero; otherwise at $03EC[0-7], and set $0612 to zero"

CertainlyCode $1F642 InitVec0685
Comment $1F642 "Init $0685[0-34] to the values from _data_1F650_indexed."

CertainlyCode $1F673 Find_1F_Vec0685
Comment $1F673 "When this function exits, either y = $123 (35), or else y points to an"
Comment $1F673 "index multiple of 7 that, when added to $10685, points to a place"
Comment $1F673 "where the current set of 3 bytes contains a $11F value somewhere (and"
Comment $1F673 "carry is set)"

CertainlyCode $1F690 SaveSumOfVec0685
Comment $1F690 "Sum $0685[0-34], save results in $06A8 (high byte first). Preserves accum."

CertainlyCode $1F69E SumVec0685
Comment $1F69E "Add $0685[0-34]. Result is 16 bit number, high byte in x, low in a"
Comment $1F69E ""
Comment $1F69E "16 bit value in $106A8 (high byte first) is rlated."
Comment $1F69E "of this fn"

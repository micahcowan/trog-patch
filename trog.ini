# @c: ma9|"byE`aoComment "bpa ""i
# @f: ye/^0

RAM $2000   PPUCTRL
RAM $2001   PPUMASK
RAM $2002   PPUSTATUS
RAM $2003   OAMADDR
RAM $2004   OAMDATA
RAM $2005   PPUSCROLL
RAM $2006   PPUADDR
RAM $2007   PPUDATA
RAM $4000   SQ1_VOL
RAM $4001   SQ1_SWEEP
RAM $4002   SQ1_LO
RAM $4003   SQ1_HI
RAM $4004   SQ2_VOL
RAM $4005   SQ2_SWEEP
RAM $4006   SQ2_LO
RAM $4007   SQ2_HI
RAM $4008   TRI_LINEAR
RAM $400A   TRI_LO
RAM $400B   TRI_HI
RAM $400C   NOISE_VOL
RAM $400E   NOISE_LO
RAM $400F   NOISE_HI
RAM $4010   DMC_FREQ
RAM $4011   DMC_RAW
RAM $4012   DMC_START
RAM $4013   DMC_LEN
RAM $4014   OAMDMA
RAM $4015   SND_CHN
RAM $4016   JOY1
RAM $4017   JOY2

# Vars
RAM $00     savedCurPPUCTRL
RAM $06     frameCtr
RAM $10     buttonScratch
#RAM $13-19 some fns save these to stack before modifying, then restore when done.
RAM $13     temp_13
RAM $14     temp_14
RAM $15     temp_15
RAM $16     temp_16
RAM $17     temp_17
RAM $18     temp_18
RAM $19     temp_19
RAM $25     savedRomBank1
RAM $26     savedRomBank2
RAM $27     currentRomBank
# if bit 7 set, player is alive:
RAM $2C     playerOneFlags  
RAM $2D     playerTwoFlags
#
RAM $2E     playerOneButtons
RAM $2F     playerTwoButtons
RAM $30     playerOneInputMask
RAM $31     playerTwoInputMask
RAM $72     playerOnePosX
RAM $73     playerTwoPosX
RAM $78     playerOnePosY
RAM $79     playerTwoPosY
#RAM $7E     see _loc_98C6
#RAM $7F     see _loc_98C6
RAM $03EC   maybePlayerOne8ByteVec
RAM $03F4   maybePlayerTwo8ByteVec
#RAM $0500   maybeCurPlayerNum
RAM $0612   relatedTo03EC
RAM $0613   relatedTo03F4
RAM $0685   35ByteVec_0685
RAM $06A8   sumOf35ByteVecH
RAM $06A9   sumOf35ByteVecL
RAM $06AD   someEnableFlag_06AD
#RAM $07B6   see _loc_98E3 - sound-related?
#RAM $07C7   see _loc_98E3 - sound-related?
#RAM $07C8   see _loc_98E3 - sound-related?
# Vec6 stuff MIGHT have to do with sound?
#       07D5 - elements used to load Vec6Mask when Vec6Values decrease to 0
RAM $07D5   MusicVec6PtrsL_7D5
RAM $07DB   MusicVec6PtrsH_7DB
RAM $07E1   MusicVec6Values_7E1

#----

# Joystick traces
#
# If this isn't the right spot, then seek down for more instances of "playerOneButtons",
# and masks that favor the start button ($10).


#Comment $18825 "@A0 - Seems a likely spot for checking for punches? searching upwards for callers..."
#Comment $18937 "@B0 - Another AB check here"
Comment $1C328 "@4"
Comment $1C302 "@3 - start of fn is $1C642"
# !!! This could maybe be where I change it? make the ordering depend on the frame counter?
CertainlyCode $18000 HandleThePlayers
CertainlyCode $18012 HandleThePlayers_
Comment $18018 "@2 - start of function is $18000"
CertainlyCode $18025 DoPlayer
Comment $181B5 "@1 - start of fn is $18025"
Comment $18F55 "@0 - HERE. This is where punching gets checked. Start of fn is $18F43."

#Comment $1D3FE "@D0 - This might be it? Follows immediately after movement button checks (which exit early if found)"
#Comment $1D42B "Clear state of buttons A and B (which brought us to this branch)."
#Comment $1D43C "This could conceivably be the check for having struck 3 times?"
#Comment $1D451 "In which case this would be the handler for striking 3 times? ...maybe not, because it's called for the other branches too"

#Comment $1D5AF "@E0"

# $1C2DC is where WaitForNmi returned in the midst of gameplay (and possibly after button press was detected)
CertainlyCode $1C2D9 MaybeGameplayLoop
Comment $1C32B "End of what may be the (in-level) gameplay loop

CertainlyCode $1448C DrawPunchRight
Comment $1448C "If this is really DrawPunchRight, why does it seem to get called every frame regardless of punch status?"

## Reset traces
#Comment $1C131 "#$5A is 90, or a second and a half of NTSC frames"
#Comment $1C131 "@5"
#Comment $1E870 "@4"
CertainlyCode $1E867 PlaySquareOneForAFrames
#Comment $1D0A5 "@3"
CertainlyCode $1D088 LoadBank2AndFeedSquare1Music
#Comment $800C "@2"
CertainlyCode $800C WrapProcessVec6s
#Comment $98E0 "@1"
#Comment $9ABB "@0"
CertainlyCode $9ABB FeedSquareOneMusicChannel
CertainlyCode $9ABD FeedAMusicChannel
## Don't back up just yet - note which memory locs are being used, and mark them appropriately.

CertainlyCode $98C6 ProcessMusicVec6s
Comment $98C6 "Add bytes at $7E and $7F, store the low nybble back to $7F"
Comment $98D1 "Divide by 16, moving the high nibble to low"
Comment $98D7 "Call DecrementAndFeedVec6Values that many times"

# _loc_98E3

Comment $98E3 "for x=0 to 16 step 4:"
Comment $98F7 "initialize sound"
Comment $9907 "initialize Vec6Mask_7DB"

# _func_9913
CertainlyCode $9913 DecrementAndFeedVec6Values
Comment $9913 "for x=0 to 5"
Comment $9918 ""
Comment $9918 "if (ptrsH[x]) { if (values[x] != 0) values[x]--; if (valuex[x]==0) then goto ++; }"
Comment $9918 ""
Comment $993E "branch: values[x] is 0 (either preexisting, or after decrement)"
Comment $9951 ""
Comment $9951 "ptrs[x] += y"
Comment $9951 "{{{"
Comment $9951 ""
Comment $995F "}}}, return to decrement-the-values loop"
Comment $9962 "if new value (which is negative) > 0xE0 (which is also negative) goto $9A04"
Comment $9962 "else if newVal == 0xFC (-4) goto $998B"
Comment $9962 "else if newVal < 0xFC (-4) goto $99CC"
Comment $9962 "else if newVal == 0xFE (-2) goto $99A4"
Comment $9962 "else if newVal == 0xFD (-3) goto $997A"
Comment $9962 "else (newVal == 0xFF (-1)) goto $99FC {{{"
Comment $997A "}}} (end of if/else if on newVal)"
Comment $997A "branch: newVal is 0xFD (-3)"
Comment $998B "branch: newVal is 0xFC (-4)"
Comment $99A4 "branch: newVal is 0xFC (-2)"
Comment $99CC "branch: newVal <  0xFC (-4)"
Comment $99FC "branch: newVal is 0xFF (-1)"
Comment $99FC ""
Comment $99FC "Store 0 in values[x]; we've reached the end of data."
Comment $99FC "Return to the decrement-values loop."

CertainlyCode $14000 JoyStickProbeWrap

CertainlyCode $145E0 JoyStickProbe
Comment $145E0 ""
Comment $145E0 "    buttons <- the currently pressed buttons, without clearing any already-recorded,"
Comment $145E0 "               non-movement buttons."
Comment $145E0 "    mask    <- used to mask out any non-movement buttons;"
Comment $145E0 "               we set it to the mask of buttons not found pressed in this frame."
Comment $145E0 ""
Comment $145E1 "Poll joystick 1, store state in $10"
Comment $1461D "End poll of joystick 1."
Comment $14633 "Poll joystick 1, store state in $10"
Comment $1466F "End poll of joystick 1."

CertainlyCode $1961B ClearPlayerOneABButtons

CertainlyCode $1C06F Reset
Comment $1C071 "Here a #$FF is written to $8007, but that location in ROM contains"
Comment $1C071 "#$FC. Isn't that a bus conflict? Maybe it's meant to obfuscate which"
Comment $1C071 "bank would really be selected (B7 if #$FF, B4 if #$FC?)"

Comment $1C078 "Clear PPU flags"
Comment $1C07E "Wait 5 frames (v blanks)"
Comment $1C088 "We're now in (5th) v blank"
Comment $1C08D "X scroll followed by Y"
Comment $1C093 "Clear PPU flags"
Comment $1C099 "Silence sound"
Comment $1C0A6 "Reset stack pointer"
Comment $1C0A9 "Disable IRQ from APU"
Comment $1C0B3 "memory mapper initialization? series of writes to register"
Comment $1C0B3 "final value written is 01, selecting Bank 01 (the second)?"
Comment $1C0B3 "...seems like it might actually be resetting IRQ handler vectors to $806F... but aren't those locations in ROM? How are they set?!"
Comment $1C0BB "$PPUCTRL <- | $10, set bkgnd tile page 1"
Comment $1C0C4 "Initialize PPU palettes with $0F (black)"
Comment $1C0DA "Enable NMI interrupt:"
Comment $1C0DD "?"
Comment $1C0E5 "if the function succeeded ($1F found), branch will (to re-initialize $0685)"
Comment $1C0E7 "Get the sum of $0685[0-34]."
Comment $1C0EA "Is that sum different from what's stored in $06A8, $06A9?"
Comment $1C0EA "Then jump to +. Else, jump to ++."
Comment $1C0F4 "+: Reinitialize the vector at $0685 and store the sum of those values."
Comment $1C0F4 "Reset $05FE to $FF"

Comment $1C0FF "Variable initialization"
Comment $1C0FF "Initialize a bunch of variables to 0."
Comment $1C117 "Init to 1"
Comment $1C11F "Init to 2"
Comment $1C127 "Initialize a pair of 8-byte vectors starting at $03EC"

#----
Comment $1C204 "Clear the start button state"

CertainlyCode $1C5BE MaybeContinueDialogOrPauseScreen
Comment $1C5BE "Check player one & two start buttons (modulo masks), go to ++ if one is pressed"

CertainlyCode $1D0BD LoadBank2AndRestoreAXYFromStack
Comment $1D0BD "Restore Rom Bank 2, then restore A,X and Y from stack."

CertainlyCode $1D550 MaybeInputCheckInLevelSelect
Comment $1D550 "Don't actually know how this function is used, just know it checks input..."

CertainlyCode $1E7C0 EnableNmiInPpu
Comment $1E7C0 "Why does it read PPUSTATUS nd then immediately discard?"

CertainlyCode $1E7DA LoadRomBank4_NmiSafe
MapperChangeRoutine $1E7DA const 4

CertainlyCode $1E7E2 LoadRomBank2_NmiSafe
MapperChangeRoutine $1E7E2 const 2

CertainlyCode $1E7EA LoadRomBank5_NmiSafe
MapperChangeRoutine $1E7EA const 5

CertainlyCode $1E7F2 LoadSavedRomBank2_NmiSafe

CertainlyCode $1E7F6 LoadSavedRomBank1_NmiSafe

CertainlyCode $1E7F8 SaveCurAndLoadRomBankA_NmiSafe

CertainlyCode $1E7FC LoadRomBankA_NmiSafe
MapperChangeRoutine $1E7F8 reg A
Comment $1E7FF "Disable PPU NMI signal"

CertainlyCode $1E816 LoadRomBank5
CertainlyCode $1E818 LoadRomBankA
MapperChangeRoutine $1E818 reg A
MapperChangeRoutine $1E816 const 5

# _func_1E867
Comment $1E867 "REPEAT (ACCUMULATOR) TIMES:"
Comment $1E870 "if $06AD != 0 then:"

CertainlyCode $1E87A WaitForNmi
Comment $1E87A "Wait for NMI handler to incr the value at $06 (inc'd at $1F03E)."

CertainlyCode $1E883 CheckForPressedJoinOrContinueStart
Comment $1E883 "If Start pressed, set carry. A <- which player pressed."
Comment $1E894 "PATCH: Change #$10 to #$90 to let P2 use A in place of Start."
Comment $1E894 "...It seems this routine is only used exactly where we would want to change that!"
Comment $1E894 "It works for level select and continue, but not for pause, so you can still punch."

CertainlyCode $1E89E SetCarryBitIfPlayerPressingAB

CertainlyCode $1E8E2 ClearJoystickButtonsAndMasks

CertainlyCode $1E8ED BankSwitchAndJoyStickProbeThenBank2

CertainlyCode $1F008 NMI
Comment $1F008 "Push A, X, Y"
Comment $1F00D "if (*(0x01) & 0x18 == 0 /* flag ck? */) then call _func_1F049, restore A,X,Y and return"

CertainlyCode $1F03E NMI_Finish

#----
Comment $1F049 "if (*(0x06AD) == 0) return"
Comment $1F04E "Save memory locs $13-19, and restore them after fn call."
Comment $1F04E "The called function will overwrite some of those locations, hence the restore."

CertainlyCode $1F627 InitializeAn8BitPlayerVec
Comment $1F627 "If accum is 0 (or $180?) store 8 zeroes at $03F4[0-7], and set $0613 to "
Comment $1F627 "zero; otherwise at $03EC[0-7], and set $0612 to zero"

CertainlyCode $1F642 InitVec0685
Comment $1F642 "Init $0685[0-34] to the values from _data_1F650_indexed."

CertainlyCode $1F673 Find_1F_Vec0685
Comment $1F673 "When this function exits, either y = $123 (35), or else y points to an"
Comment $1F673 "index multiple of 7 that, when added to $10685, points to a place"
Comment $1F673 "where the current set of 3 bytes contains a $11F value somewhere (and"
Comment $1F673 "carry is set)"

CertainlyCode $1F690 SaveSumOfVec0685
Comment $1F690 "Sum $0685[0-34], save results in $06A8 (high byte first). Preserves accum."

CertainlyCode $1F69E SumVec0685
Comment $1F69E "Add $0685[0-34]. Result is 16 bit number, high byte in x, low in a"
Comment $1F69E ""
Comment $1F69E "16 bit value in $106A8 (high byte first) is rlated."
